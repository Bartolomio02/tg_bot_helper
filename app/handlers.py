from datetime import datetime
import os
import logging
import asyncio
from aiogram import F, Router, types
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from static import messages
from .keyboard import get_main_keyboard, get_yes_no_keyboard, get_continue_keyboard, get_back_keyboard
from .fsm import UserForm, ChatMode, MediaForm, OtherPeopleHelpForm
from .middleware import get_operator_ids
from .user_access import user_access
from .users_data import UsersData

users_data = UsersData()



# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
router = Router()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_timers = {}

# –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–≤–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text[0] == "üîô")
async def back_to_main_menu(message: Message, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await state.clear()
    await state.set_state(ChatMode.automated)
    await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")



async def check_timeout(user_id: int, state: FSMContext, message: Message):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–π–º-–∞—É—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await asyncio.sleep(180)  # 3 –º–∏–Ω—É—Ç—ã
    current_state = await state.get_state()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—Å–µ —â–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
    if current_state in [
        UserForm.waiting_for_name,
        UserForm.waiting_for_age,
        UserForm.waiting_for_location,
        UserForm.waiting_for_event_details,
        UserForm.waiting_for_help_type,
    ]:
        await message.answer(
            messages.ask_description_form_message, parse_mode="HTML"
        )
        await asyncio.sleep(15)
        await message.answer(
            "‚ùì <b>–ü—Ä–æ–¥–æ–≤–∂–∏–º–æ?</b>",
            reply_markup=get_yes_no_keyboard(),
            parse_mode="HTML"
        )
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
        await state.set_state("waiting_continue")
    if current_state == ChatMode.waiting_continue_help:
        await message.answer(
            messages.cancel_waiting_help_message, parse_mode="HTML", reply_markup=get_back_keyboard()
        )
        await state.clear()



async def extract_user_id(message: Message) -> int and str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        if message.forward_from:
            return message.forward_from.id
        if message.text and "ID: " in message.text:
            uuid_user = message.text.split("ID: ")[1].split("\n")[0]
            user_data = await users_data.get_user_data_by_uuid(uuid_user)
            id_user = user_data['telegram_user_id']
            return int(id_user), uuid_user
    except (IndexError, ValueError, AttributeError):
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
        return None, None
    return None, None


async def forward_to_operators(message: Message, user_context: str = None):
    """–ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    operator_ids = get_operator_ids()

    for operator_id in operator_ids:
        try:
            user_data = await users_data.get_user_data(str(message.from_user.id))
            forwarded = await message.forward(operator_id)
            notification = (
                f"<b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n"
                f"üìã <b>ID:</b> <code>{user_data['uuid']}</code>\n"
                f"üë§ <b>–Ü–º'—è:</b> {message.from_user.full_name}\n"
                f"üì± <b>Username:</b> @{message.from_user.username}"
            )
            if user_context:
                notification += f"\nüìù <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> <i>{user_context}</i>"
            await message.bot.send_message(operator_id, notification, parse_mode="HTML")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {e}")


async def forward_to_user(message: Message, user_id: int):
    """–ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    user_data = await users_data.get_user_data(str(user_id))
    if user_access.is_blocked(user_data['uuid']):
        await message.answer(
            f"‚ùå <b>–ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á</b> <code>{user_id}</code> <b>–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.</b>",
            parse_mode="HTML"
        )
        return
    await message.copy_to(user_id)


@router.message(Command("form"))
async def show_user_form_handler(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if message.from_user.id not in get_operator_ids():
        return

    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer(
                "‚ùå <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b> /form ID_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /form 01/01/2025 1",
                parse_mode="HTML"
            )
            return

        user_uuid = args[1] + " " + args[2]

        user_data = await users_data.get_user_data_by_uuid(user_uuid)
        if user_data is None:
            await message.answer(
                f"‚ùå <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID</b> <code>{user_uuid}</code> <b>–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>",
                parse_mode="HTML"
            )
            return

        user_info = (
            f"üìã <b>–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n"
            f'üìã <b>ID:</b> <code>{user_data["uuid"]}</code>\n'
            f"üë§ <b>–Ü–º'—è:</b> {user_data['name']}\n"
            f"üìÖ <b>–í—ñ–∫:</b> {user_data['age']}\n"
            f"üìç <b>–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:</b> {user_data['location']}\n"
            f"üìù <b>–î–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó:</b> {user_data['event_details']}\n"
            f"üÜò <b>–¢–∏–ø –¥–æ–ø–æ–º–æ–≥–∏:</b> {user_data['help_type']}\n"
        )
        await message.answer(user_info, parse_mode="HTML")

    except ValueError:
        await message.answer(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>",
            parse_mode="HTML"
        )

@router.message(Command("block"))
async def block_user_handler(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if message.from_user.id not in get_operator_ids():
        return

    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer(
                "‚ùå <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b> /block ID_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /block 01/01/2025 1",
                parse_mode="HTML"
            )
            return

        user_uuid = str(args[1] + " " + args[2])
        if user_access.block_user(user_uuid):
            await message.answer(
                f"‚úÖ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID</b> <code>{user_uuid}</code> <b>–∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ</b>",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚ÑπÔ∏è <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID</b> <code>{user_uuid}</code> <b>–≤–∂–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π</b>",
                parse_mode="HTML"
            )
    except ValueError:
        await message.answer(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>",
            parse_mode="HTML"
        )


@router.message(Command("unblock"))
async def unblock_user_handler(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if message.from_user.id not in get_operator_ids():
        return

    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer(
                "‚ùå <b>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:</b> /unblock ID_–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /unblock 01/01/2025 1",
                parse_mode="HTML"
            )
            return

        user_uuid = str(args[1] + " " + args[2])
        if user_access.unblock_user(user_uuid):
            await message.answer(
                f"‚úÖ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID</b> <code>{user_uuid}</code> <b>—Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ</b>",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚ÑπÔ∏è <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID</b> <code>{user_uuid}</code> <b>–Ω–µ –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π</b>",
                parse_mode="HTML"
            )
    except ValueError:
        await message.answer(
            "‚ùå <b>–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>",
            parse_mode="HTML"
        )


@router.message(Command("blocked_list"))
async def blocked_list_handler(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–ø–∏—Å–∫—É –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if message.from_user.id not in get_operator_ids():
        return

    blocked_users = user_access.get_blocked_users()
    if not blocked_users:
        await message.answer(
            "‚ÑπÔ∏è <b>–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>",
            parse_mode="HTML"
        )
        return

    blocked_list = "\n".join([f"‚Ä¢ <code>{user_id}</code>" for user_id in blocked_users])
    await message.answer(
        f"üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n\n{blocked_list}",
        parse_mode="HTML"
    )


@router.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
    help_text = (
        "ü§ñ <b>–î–æ–ø–æ–º–æ–≥–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞:</b>\n\n"
        "üìù <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "/start - –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n"
        "/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é\n"
    )

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤
    if message.from_user.id in get_operator_ids():
        help_text += (
            "\nüìã <b>–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤:</b>\n"
            "/block ID - –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            "/unblock ID - –†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
            "/blocked_list - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            "/form ID - –ü–æ–∫–∞–∑–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n"
        )

    help_text += (
        "\n‚ÑπÔ∏è <b>–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n"
        "- –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –≤–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é\n"
        "- –í—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ\n"
        "- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑ 9:00 –¥–æ 20:00\n"
        "- –í –Ω–µ—Ä–æ–±–æ—á–∏–π —á–∞—Å –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–≤–æ—î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è"
    )

    await message.answer(help_text, parse_mode="HTML")


@router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /cancel"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_access.is_blocked(user_data['uuid']):
        await message.answer(
            "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
            parse_mode="HTML"
        )
        return

    current_state = await state.get_state()
    if current_state is None:
        return

    # –°–∫–∞—Å—É—î–º–æ —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    if message.from_user.id in user_timers:
        user_timers[message.from_user.id].cancel()
        del user_timers[message.from_user.id]

    await state.clear()
    await message.answer(
        "‚ùå <b>–ü–æ—Ç–æ—á–Ω—É –¥—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</b>\n"
        "–©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
        parse_mode="HTML"
    )


@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä
    if message.from_user.id in get_operator_ids():
        await message.answer(
            "üëã <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
            "–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —ó—Ö –¥–æ—Å—Ç—É–ø–æ–º.",
            parse_mode="HTML"
        )
        return

    current_hour = datetime.now().hour

    add_user = await users_data.add_user(str(message.from_user.id))
    if add_user:
        user_data = await users_data.get_user_data(str(message.from_user.id))
        # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –ø—Ä–æ –Ω–æ–≤–∏–π —á–∞—Ç
        notification = (
            f"üÜï <b>–ù–æ–≤–∏–π —á–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ:</b>\n"
            f"üìã <b>ID:</b> <code>{user_data['uuid']}</code>\n"
            f"üë§ <b>–Ü–º'—è:</b> {message.from_user.full_name}\n"
            f"üì± <b>Username:</b> @{message.from_user.username}"
        )
        for operator_id in get_operator_ids():
            try:
                await message.bot.send_message(operator_id, notification, parse_mode="HTML")
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {e}")

    if 9 <= int(current_hour)+2 <= 20:
        # –†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏
        await state.set_state(ChatMode.automated)
        await message.answer(messages.main_message_online, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(30) # –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ 30
        await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")
    else:
        # –ù–µ—Ä–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏
        await state.set_state(ChatMode.waiting_urgent_help)
        await message.answer(messages.main_message_offline, reply_markup=get_yes_no_keyboard(), parse_mode="HTML")


@router.message(ChatMode.waiting_urgent_help, F.text.casefold() == "—Ç–∞–∫")
async def handle_urgent_yes(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ—Ä–º—ñ–Ω–æ–≤–æ—ó –¥–æ–ø–æ–º–æ–≥–∏"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    await message.answer(messages.help_message_offline_one, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    # –û—á—ñ–∫—É—î–º–æ 15 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(15)
    await state.set_state(ChatMode.waiting_continue_help)
    await message.answer(messages.help_message_offline_two, reply_markup=get_yes_no_keyboard(), parse_mode="HTML")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º-–∞—É—Ç–∞
    user_timers[message.from_user.id] = asyncio.create_task(
        check_timeout(message.from_user.id, state, message)
    )

@router.message(ChatMode.waiting_continue_help)
async def handle_urgent_help(message: Message, state: FSMContext):
    if message.text.casefold() == "—Ç–∞–∫":
        await asyncio.sleep(1)
        await message.answer(messages.main_message_online, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(15)
        await message.answer(messages.start_form_message, parse_mode="HTML")
        await asyncio.sleep(3)
        await message.answer(messages.ask_name_form_message, parse_mode="HTML", reply_markup=get_back_keyboard())
        await state.set_state(UserForm.waiting_for_name)
    elif message.text.casefold() == "–Ω—ñ":
        await message.answer(
            messages.cancel_waiting_help_message,
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )
        await state.clear()
    else:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é</b>", parse_mode="HTML")


@router.message(ChatMode.waiting_urgent_help, F.text.casefold() == "–Ω—ñ")
async def handle_urgent_no(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ—ó –¥–æ–ø–æ–º–æ–≥–∏"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    await state.set_state(UserForm.waiting_for_name)
    await message.answer(messages.main_message_online, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(3)
    await message.answer(messages.start_form_message, parse_mode="HTML")
    await asyncio.sleep(3)
    await message.answer(messages.ask_name_form_message, parse_mode="HTML", reply_markup=get_back_keyboard())

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º-–∞—É—Ç–∞
    user_timers[message.from_user.id] = asyncio.create_task(
        check_timeout(message.from_user.id, state, message)
    )


@router.message(ChatMode.automated)
async def handle_menu_choice(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–µ–Ω—é —Ç–∞ –ø–æ—á–∞—Ç–æ–∫ —Ñ–æ—Ä–º–∏"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    if not message.text:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>", parse_mode="HTML")
        return

    # –°–ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –æ–ø—Ü—ñ—ó –º–µ–Ω—é
    if "5Ô∏è‚É£" in message.text:
        await state.set_state(MediaForm.waiting_for_media)
        await message.answer(messages.media_message, parse_mode="HTML", reply_markup=get_back_keyboard())
        return
    elif "6Ô∏è‚É£" in message.text:
        await state.set_state(OtherPeopleHelpForm.waiting_for_other_people_help_message)
        await message.answer(messages.other_people_help_message, parse_mode="HTML", reply_markup=get_back_keyboard())
        return

    # –ü–æ—á–∏–Ω–∞—î–º–æ —Ñ–æ—Ä–º—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–ø—Ü—ñ–π –º–µ–Ω—é 1-4
    if any(num in message.text for num in ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"]):
        await state.set_state(UserForm.waiting_for_name)
        await message.answer(messages.start_form_message, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        # –û—á—ñ–∫—É—î–º–æ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        await message.answer(messages.ask_name_form_message, parse_mode="HTML", reply_markup=get_back_keyboard())

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–π–º-–∞—É—Ç—É
        user_timers[message.from_user.id] = asyncio.create_task(
            check_timeout(message.from_user.id, state, message)
        )
    else:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é</b>", parse_mode="HTML")



@router.message(UserForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    if not message.text:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode="HTML")
        return

    if message.text == "üîô –ì–æ–ª–æ–≤–Ωe –º–µ–Ω—é":
        await state.clear()
        await state.set_state(ChatMode.automated)
        await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")
        return
    # –°–∫–∞—Å—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    if message.from_user.id in user_timers:
        user_timers[message.from_user.id].cancel()

    await state.update_data(name=message.text)
    await state.update_data(uuid=user_data['uuid'])
    await users_data.update_user_data(message.from_user.id, "name", message.text)
    await state.set_state(UserForm.waiting_for_age)
    # –æ—á—ñ–∫—É—î–º–æ 3 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(3)
    await message.answer(messages.ask_age_form_message, parse_mode="HTML")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
    user_timers[message.from_user.id] = asyncio.create_task(
        check_timeout(message.from_user.id, state, message)
    )


@router.message(UserForm.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    if not message.text:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ —á–∏—Å–ª–æ–º</b>", parse_mode="HTML")
        return
    if "üîô" in message.text:
        await state.clear()
        await state.set_state(ChatMode.automated)
        await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")
        return

    try:
        age = int(message.text)
        if age < 1 or age > 120:
            raise ValueError("Invalid age range")

        # –°–∫–∞—Å—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
        if message.from_user.id in user_timers:
            user_timers[message.from_user.id].cancel()

        await state.update_data(age=age)
        await users_data.update_user_data(message.from_user.id, "age", age)
        # –æ—á—ñ–∫—É—î–º–æ 3 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(3)
        await state.set_state(UserForm.waiting_for_location)
        await message.answer(messages.ask_geo_form_message, parse_mode="HTML")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
        user_timers[message.from_user.id] = asyncio.create_task(
            check_timeout(message.from_user.id, state, message)
        )
    except ValueError:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ —á–∏—Å–ª–æ–º</b>", parse_mode="HTML")


@router.message(UserForm.waiting_for_location)
async def process_location(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    if not message.text:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode="HTML")
        return
    if "üîô" in message.text:
        await state.clear()
        await state.set_state(ChatMode.automated)
        await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")
        return
    # –°–∫–∞—Å—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    if message.from_user.id in user_timers:
        user_timers[message.from_user.id].cancel()

    await state.update_data(location=message.text)
    await users_data.update_user_data(message.from_user.id, "location", message.text)
    await state.set_state(UserForm.waiting_for_event_details)
    # –æ—á—ñ–∫—É—î–º–æ 3 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(3)
    await message.answer(messages.ask_where_form_message, parse_mode="HTML")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
    user_timers[message.from_user.id] = asyncio.create_task(
        check_timeout(message.from_user.id, state, message)
    )


@router.message(UserForm.waiting_for_event_details)
async def process_event_details(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥—ñ—ó"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    if not message.text:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode="HTML")
        return
    if "üîô" in message.text:
        await state.clear()
        await state.set_state(ChatMode.automated)
        await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")
        return
    # –°–∫–∞—Å—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    if message.from_user.id in user_timers:
        user_timers[message.from_user.id].cancel()

    await state.update_data(event_details=message.text)
    await users_data.update_user_data(message.from_user.id, "event_details", message.text)
    await state.set_state(UserForm.waiting_for_help_type)
    # –æ—á—ñ–∫—É—î–º–æ 3 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(3)
    await message.answer(messages.ask_what_form_message, parse_mode="HTML")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
    user_timers[message.from_user.id] = asyncio.create_task(
        check_timeout(message.from_user.id, state, message)
    )


@router.message(UserForm.waiting_for_help_type)
async def process_help_type(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–∏–ø—É –¥–æ–ø–æ–º–æ–≥–∏"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    if not message.text:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥–æ–ø–æ–º–æ–≥—É —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode="HTML")
        return
    if "üîô" in message.text:
        await state.clear()
        await state.set_state(ChatMode.automated)
        await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")
        return
    # –°–∫–∞—Å—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    if message.from_user.id in user_timers:
        user_timers[message.from_user.id].cancel()

    await state.update_data(help_type=message.text)
    await users_data.update_user_data(message.from_user.id, "help_type", message.text)

    await process_description(message, state)


async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –æ–ø–∏—Å—É —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    if not message.text:
        await message.answer("‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –æ–ø–∏—Å —Ç–µ–∫—Å—Ç–æ–º</b>", parse_mode="HTML")
        return
    if "üîô" in message.text:
        await state.clear()
        await state.set_state(ChatMode.automated)
        await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")
        return
    # –°–∫–∞—Å—É—î–º–æ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ñ–æ—Ä–º–∏
    if message.from_user.id in user_timers:
        user_timers[message.from_user.id].cancel()
        del user_timers[message.from_user.id]

    user_data = await state.get_data()
    await state.update_data(description=message.text)
    await users_data.update_user_data(message.from_user.id, "description", message.text)
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
    notification = (
        f"üìã <b>–§–æ—Ä–º–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞:</b>\n\n"
        f"üìå <b>ID:</b> <code>{user_data['uuid']}</code>\n"
        f"üë§ <b>–Ü–º'—è:</b> {user_data['name']}\n"
        f"üìÖ <b>–í—ñ–∫:</b> {user_data['age']}\n"
        f"üìç <b>–ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:</b> {user_data['location']}\n"
        f"üîç <b>–î–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó:</b> {user_data['event_details']}\n"
        f"üÜò <b>–¢–∏–ø –¥–æ–ø–æ–º–æ–≥–∏:</b> {user_data['help_type']}"
    )

    for operator_id in get_operator_ids():
        try:
            await message.bot.send_message(operator_id, notification, parse_mode="HTML")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {e}")

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—É—á–Ω–∏–π —Ä–µ–∂–∏–º —á–∞—Ç—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await state.set_state(ChatMode.manual)
    await message.answer(messages.final_form_message, parse_mode="HTML", reply_markup=get_back_keyboard())


@router.message(MediaForm.waiting_for_media)
async def process_media(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—å –≤—ñ–¥ –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫—ñ–≤ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π —Ç–∞ –º–µ–¥—ñ–∞"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML",
                reply_markup=get_back_keyboard()
            )
            return
    print(message.text)
    if "üîô" in message.text:
        await state.clear()
        await state.set_state(ChatMode.automated)
        await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")
        return
    # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –∑–∞—è–≤—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
    await forward_to_operators(message, "–ü—Ä–µ–¥—Å—Ç–∞–≤–∫–Ω–∏–∫ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó/–º–µ–¥—ñ–∞")

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—É—á–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
    await state.set_state(ChatMode.manual)
    await message.answer(
        "‚úÖ <b>–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É.</b>\n"
        "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
        parse_mode="HTML",
        reply_markup=get_back_keyboard()
    )


@router.message(OtherPeopleHelpForm.waiting_for_other_people_help_message)
async def process_other_people_help(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ–ø–æ–º–æ–≥—É —ñ–Ω—à–∏–º"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    if not message.text:
        await message.answer(
            "‚ùå <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—é —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º</b>",
            parse_mode="HTML"
        )
        return
    if "üîô" in message.text:
        await state.clear()
        await state.set_state(ChatMode.automated)
        await message.answer(messages.menu_message, reply_markup=get_main_keyboard(), parse_mode="HTML")
        return
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—É—á–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
    await state.set_state(ChatMode.manual)


    # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
    if message.from_user.id not in get_operator_ids():
        await forward_to_operators(message, "–î–æ–ø–æ–º–æ–≥–∞ —ñ–Ω—à–∏–º")
        await message.answer(
            "‚úÖ <b>–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É.</b>\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.",
            parse_mode="HTML",
            reply_markup=get_back_keyboard()
        )


@router.message(lambda message: message.text and message.from_user.id in user_timers)
async def handle_continue_response(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏"""
    current_state = await state.get_state()

    if current_state == "waiting_continue":
        if message.text.lower() == "–Ω—ñ":
            # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å "–ù—ñ", —Å–∫–∞—Å–æ–≤—É—î–º–æ —Ñ–æ—Ä–º—É
            if message.from_user.id in user_timers:
                user_timers[message.from_user.id].cancel()
                del user_timers[message.from_user.id]
            await state.clear()
            await message.answer(messages.cancel_form_message, parse_mode="HTML", reply_markup=get_back_keyboard())
            await asyncio.sleep(2)
            await message.answer(
                "‚ùå <b>–ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</b>\n"
                "–©–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∞–±–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è",
                parse_mode="HTML",
                reply_markup=get_back_keyboard()
            )
        elif message.text.lower() == "—Ç–∞–∫":
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω —Ç–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
            user_data = await state.get_data()
            if 'name' not in user_data:
                await state.set_state(UserForm.waiting_for_name)
                await message.answer(messages.ask_name_form_message, parse_mode="HTML",
                                     reply_markup=get_back_keyboard())
            elif 'age' not in user_data:
                await state.set_state(UserForm.waiting_for_age)
                await message.answer(messages.ask_age_form_message, parse_mode="HTML",
                                     reply_markup=get_back_keyboard())
            elif 'location' not in user_data:
                await state.set_state(UserForm.waiting_for_location)
                await message.answer(messages.ask_geo_form_message, parse_mode="HTML",
                                     reply_markup=get_back_keyboard())
            elif 'event_details' not in user_data:
                await state.set_state(UserForm.waiting_for_event_details)
                await message.answer(messages.ask_where_form_message, parse_mode="HTML",
                                     reply_markup=get_back_keyboard())
            elif 'help_type' not in user_data:
                await state.set_state(UserForm.waiting_for_help_type)
                await message.answer(messages.ask_what_form_message, parse_mode="HTML",
                                     reply_markup=get_back_keyboard())

            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä
            user_timers[message.from_user.id] = asyncio.create_task(
                check_timeout(message.from_user.id, state, message)
            )
        else:
            # —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ—Ç—å –Ω–µ "—Ç–∞–∫" —á–∏ "–Ω—ñ" –∑–∞–ø–∏—Å—É—î–º–æ —ó—ó –≤ –∞–Ω–∫–µ—Ç—É
            user_data = await state.get_data()
            if 'name' not in user_data:
                await process_name(message, state)
            elif 'age' not in user_data:
                await process_age(message, state)
            elif 'location' not in user_data:
                await process_location(message, state)
            elif 'event_details' not in user_data:
                await process_event_details(message, state)
            elif 'help_type' not in user_data:
                await process_help_type(message, state)





@router.message(ChatMode.manual)
async def handle_manual_mode(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ —Ä—É—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_data is not None:
        if user_access.is_blocked(user_data['uuid']):
            await message.answer(
                "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
                parse_mode="HTML"
            )
            return

    if message.from_user.id not in get_operator_ids():
        # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –π–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        await forward_to_operators(message, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤
@router.message(lambda message: message.from_user.id in get_operator_ids() and message.reply_to_message is not None)
async def handle_operator_reply(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        user_id, user_uuid = await extract_user_id(message.reply_to_message)
    except TypeError:
        user_id = await extract_user_id(message.reply_to_message)

    if user_id:
        # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await forward_to_user(message, user_id)
        await message.answer(
            f"‚úÖ <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</b>",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ</b>",
            parse_mode="HTML"
        )


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@router.message(lambda message: not message.text)
async def handle_non_text(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_data = await users_data.get_user_data(str(message.from_user.id))
    if user_access.is_blocked(user_data['uuid']):
        await message.answer(
            "‚ùå <b>–ù–∞ –∂–∞–ª—å, –≤–∞—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞ –æ–±–º–µ–∂–µ–Ω–æ.</b>",
            parse_mode="HTML"
        )
        return

    # –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —ñ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if message.from_user.id in get_operator_ids() and message.reply_to_message:
        user_id, user_uuid = await extract_user_id(message.reply_to_message)
        if user_id:
            await forward_to_user(message, user_id)
            await message.answer(
                f"‚úÖ <b>–ú–µ–¥—ñ–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</b> <code>{user_uuid}</code>",
                parse_mode="HTML"
            )
            return

    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if message.from_user.id not in get_operator_ids():
        await forward_to_operators(message, "–ú–µ–¥—ñ–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        await message.answer(
            "‚úÖ <b>–í–∞—à–µ –º–µ–¥—ñ–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É</b>",
            parse_mode="HTML"
        )
